// vite.config.ts
import { resolve } from "node:path";
import react from "file:///Users/daandegooijer/Projects/Gooijer/Packages/react-google-maps-finder/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///Users/daandegooijer/Projects/Gooijer/Packages/react-google-maps-finder/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/daandegooijer/Projects/Gooijer/Packages/react-google-maps-finder/node_modules/vite-plugin-dts/dist/index.mjs";
import tsConfigPaths from "file:///Users/daandegooijer/Projects/Gooijer/Packages/react-google-maps-finder/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "@react-google-maps/api": "^2.19.2"
};

// vite.config.ts
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    dts({
      rollupTypes: true
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "index.ts"),
      name: "ReactGMLocationFinder",
      formats: ["es", "umd"],
      fileName: (format) => `react-gm-location-finder.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2RhYW5kZWdvb2lqZXIvUHJvamVjdHMvR29vaWplci9QYWNrYWdlcy9yZWFjdC1nb29nbGUtbWFwcy1maW5kZXJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9kYWFuZGVnb29pamVyL1Byb2plY3RzL0dvb2lqZXIvUGFja2FnZXMvcmVhY3QtZ29vZ2xlLW1hcHMtZmluZGVyL3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9kYWFuZGVnb29pamVyL1Byb2plY3RzL0dvb2lqZXIvUGFja2FnZXMvcmVhY3QtZ29vZ2xlLW1hcHMtZmluZGVyL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCc7XG5pbXBvcnQgcmVhY3QgZnJvbSAnQHZpdGVqcy9wbHVnaW4tcmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cyc7XG5pbXBvcnQgdHNDb25maWdQYXRocyBmcm9tICd2aXRlLXRzY29uZmlnLXBhdGhzJztcbmltcG9ydCAqIGFzIHBhY2thZ2VKc29uIGZyb20gJy4vcGFja2FnZS5qc29uJztcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoY29uZmlnRW52KSA9PiAoe1xuICAgIHBsdWdpbnM6IFtcbiAgICAgICAgcmVhY3QoKSxcbiAgICAgICAgdHNDb25maWdQYXRocygpLFxuICAgICAgICBkdHMoe1xuICAgICAgICAgICAgcm9sbHVwVHlwZXM6IHRydWVcbiAgICAgICAgfSlcbiAgICBdLFxuICAgIGJ1aWxkOiB7XG4gICAgICAgIGxpYjoge1xuICAgICAgICAgICAgZW50cnk6IHJlc29sdmUoJ3NyYycsICdpbmRleC50cycpLFxuICAgICAgICAgICAgbmFtZTogJ1JlYWN0R01Mb2NhdGlvbkZpbmRlcicsXG4gICAgICAgICAgICBmb3JtYXRzOiBbJ2VzJywgJ3VtZCddLFxuICAgICAgICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGByZWFjdC1nbS1sb2NhdGlvbi1maW5kZXIuJHtmb3JtYXR9LmpzYFxuICAgICAgICB9LFxuICAgICAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICAgICAgICBleHRlcm5hbDogWy4uLk9iamVjdC5rZXlzKHBhY2thZ2VKc29uLnBlZXJEZXBlbmRlbmNpZXMpXVxuICAgICAgICB9XG4gICAgfVxufSkpO1xuIiwgIntcbiAgICBcIm5hbWVcIjogXCJAZWYyL3JlYWN0LWdtLWxvY2F0aW9uLWZpbmRlclwiLFxuICAgIFwicHJpdmF0ZVwiOiBmYWxzZSxcbiAgICBcInZlcnNpb25cIjogXCIwLjAuM1wiLFxuICAgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgIFwic2NyaXB0c1wiOiB7XG4gICAgICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgICAgICBcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGRcIixcbiAgICAgICAgXCJsaW50XCI6IFwiZXNsaW50IC4gLS1leHQgdHMsdHN4IC0tcmVwb3J0LXVudXNlZC1kaXNhYmxlLWRpcmVjdGl2ZXMgLS1tYXgtd2FybmluZ3MgMFwiLFxuICAgICAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIlxuICAgIH0sXG4gICAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICAgICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcbiAgICAgICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCIsXG4gICAgICAgIFwiQHJlYWN0LWdvb2dsZS1tYXBzL2FwaVwiOiBcIl4yLjE5LjJcIlxuICAgIH0sXG4gICAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjE4LjcuNlwiLFxuICAgICAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjE1XCIsXG4gICAgICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjdcIixcbiAgICAgICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvZXNsaW50LXBsdWdpblwiOiBcIl42LjAuMFwiLFxuICAgICAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNi4wLjBcIixcbiAgICAgICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl40LjAuM1wiLFxuICAgICAgICBcImRhdGUtZm5zXCI6IFwiXjIuMzAuMFwiLFxuICAgICAgICBcImVzbGludFwiOiBcIl44LjQ1LjBcIixcbiAgICAgICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXG4gICAgICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoXCI6IFwiXjAuNC4zXCIsXG4gICAgICAgIFwibG9kYXNoLWVzXCI6IFwiXjQuMTcuMjFcIixcbiAgICAgICAgXCJwcmV0dGllclwiOiBcIl4yLjcuMVwiLFxuICAgICAgICBcInR5cGVzY3JpcHRcIjogXCJeNS4wLjJcIixcbiAgICAgICAgXCJ2aXRlXCI6IFwiXjQuNC41XCIsXG4gICAgICAgIFwidml0ZS1wbHVnaW4tZHRzXCI6IFwiXjEuNC4xXCIsXG4gICAgICAgIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiOiBcIl4zLjUuMFwiXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBHb29nbGUgTWFwcyBMb2NhdGlvbiBGaW5kZXIgcGFja2FnZVwiLFxuICAgIFwibWFpblwiOiBcIi4vZGlzdC9yZWFjdC1nbS1sb2NhdGlvbi1maW5kZXIudW1kLmpzXCIsXG4gICAgXCJtb2R1bGVcIjogXCIuL2Rpc3QvcmVhY3QtZ20tbG9jYXRpb24tZmluZGVyLmVzLmpzXCIsXG4gICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gICAgXCJleHBvcnRzXCI6IHtcbiAgICAgICAgXCIuXCI6IHtcbiAgICAgICAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L3JlYWN0LWdtLWxvY2F0aW9uLWZpbmRlci5lcy5qc1wiLFxuICAgICAgICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L3JlYWN0LWdtLWxvY2F0aW9uLWZpbmRlci51bWQuanNcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInJlcG9zaXRvcnlcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICAgICAgXCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2VmMi1kaWdpdGFsL3JlYWN0LWdtLWxvY2F0aW9uLWZpbmRlci5naXRcIlxuICAgIH0sXG4gICAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgICAgIFwibG9jYXRpb24gZmluZGVyXCJcbiAgICBdLFxuICAgIFwiYXV0aG9yXCI6IFwiRGFhbiBkZSBHXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gICAgXCJidWdzXCI6IHtcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZWYyLWRpZ2l0YWwvcmVhY3QtZ20tbG9jYXRpb24tZmluZGVyL2lzc3Vlc1wiXG4gICAgfSxcbiAgICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9lZjIubmxcIixcbiAgICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgICAgIFwiQHR5cGVzL2xvZGFzaC1lc1wiOiBcIl40LjE3LjhcIixcbiAgICAgICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4xLjE0LjBcIixcbiAgICAgICAgXCJ2aXRlLWR0c1wiOiBcIl4xLjAuNFwiXG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUF1WSxTQUFTLGVBQWU7QUFDL1osT0FBTyxXQUFXO0FBQ2xCLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUztBQUNoQixPQUFPLG1CQUFtQjs7O0FDT3RCLHVCQUFvQjtBQUFBLEVBQ2hCLE9BQVM7QUFBQSxFQUNULGFBQWE7QUFBQSxFQUNiLDBCQUEwQjtBQUM5Qjs7O0FEUEosSUFBTyxzQkFBUSxhQUFhLENBQUMsZUFBZTtBQUFBLEVBQ3hDLFNBQVM7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLGNBQWM7QUFBQSxJQUNkLElBQUk7QUFBQSxNQUNBLGFBQWE7QUFBQSxJQUNqQixDQUFDO0FBQUEsRUFDTDtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0gsS0FBSztBQUFBLE1BQ0QsT0FBTyxRQUFRLE9BQU8sVUFBVTtBQUFBLE1BQ2hDLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyw0QkFBNEIsTUFBTTtBQUFBLElBQzVEO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDWCxVQUFVLENBQUMsR0FBRyxPQUFPLEtBQWlCLGdCQUFnQixDQUFDO0FBQUEsSUFDM0Q7QUFBQSxFQUNKO0FBQ0osRUFBRTsiLAogICJuYW1lcyI6IFtdCn0K
